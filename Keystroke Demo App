#!/usr/bin/env python3
"""
Keystroke Demo App (ethical classroom demo).
Only captures keystrokes typed INSIDE this application.
Requires explicit consent via a checkbox before logging starts.
"""

import tkinter as tk
from tkinter import messagebox, scrolledtext
from datetime import datetime
import csv
import os

LOG_FILE = "keystroke_demo_log.csv"

class KeystrokeDemoApp:
    def __init__(self, root):
        self.root = root
        root.title("Keystroke Demo (Ethical)")

        frm = tk.Frame(root, padx=10, pady=10)
        frm.pack(fill="both", expand=True)

        consent_frame = tk.Frame(frm)
        consent_frame.pack(anchor="w", pady=(0,8))

        self.consent_var = tk.IntVar(value=0)
        consent_cb = tk.Checkbutton(consent_frame, text="I consent to this demo logging my keystrokes (only inside this app).", variable=self.consent_var)
        consent_cb.pack(side="left")

        start_btn = tk.Button(consent_frame, text="Start Logging", command=self.toggle_logging)
        start_btn.pack(side="left", padx=8)

        help_lbl = tk.Label(frm, text="Type in the box below. Only keystrokes inside this box will be logged.", fg="blue")
        help_lbl.pack(anchor="w")

        self.text = scrolledtext.ScrolledText(frm, width=80, height=20, wrap="word")
        self.text.pack(fill="both", expand=True)
        self.text.bind("<Key>", self.on_key)  # captures keys within this widget

        bottom = tk.Frame(frm)
        bottom.pack(fill="x", pady=(8,0))

        save_btn = tk.Button(bottom, text="Save Snapshot", command=self.save_snapshot)
        save_btn.pack(side="left")

        view_btn = tk.Button(bottom, text="View Log File", command=self.view_log)
        view_btn.pack(side="left", padx=8)

        self.logging = False

        # ensure log file exists with header
        if not os.path.exists(LOG_FILE):
            with open(LOG_FILE, "w", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                writer.writerow(["timestamp_iso", "widget", "key_sym", "char"])

    def toggle_logging(self):
        if not self.consent_var.get():
            messagebox.showwarning("Consent required", "You must check the consent box before logging can start.")
            return
        self.logging = not self.logging
        state = "ON" if self.logging else "OFF"
        messagebox.showinfo("Logging state", f"Logging is now {state} (only captures keys inside the app).")

    def on_key(self, event):
        """
        Called for each key event inside the text widget.
        We log timestamp, widget name, keysym and printable char (if any).
        """
        if not self.logging:
            return  # do NOT log unless consent + started

        timestamp = datetime.utcnow().isoformat() + "Z"
        widget = str(event.widget)
        keysym = event.keysym
        char = event.char if event.char else ""
        # append to CSV
        with open(LOG_FILE, "a", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow([timestamp, widget, keysym, char])

    def save_snapshot(self):
        # Save current text content to a timestamped file (explicit snapshot)
        content = self.text.get("1.0", "end-1c")
        if not content.strip():
            messagebox.showinfo("No text", "Text box is empty â€” nothing to save.")
            return
        fname = f"snapshot_{datetime.utcnow().strftime('%Y%m%dT%H%M%SZ')}.txt"
        with open(fname, "w", encoding="utf-8") as f:
            f.write(content)
        messagebox.showinfo("Saved", f"Snapshot saved to {fname}")

    def view_log(self):
        if not os.path.exists(LOG_FILE):
            messagebox.showinfo("No log", "No log file found.")
            return
        try:
            os.startfile(LOG_FILE)  # Windows; on other OSes, user can open manually
        except Exception:
            # fallback: show a small popup with last 20 lines
            with open(LOG_FILE, encoding="utf-8") as f:
                lines = f.readlines()[-20:]
            messagebox.showinfo("Last log lines", "".join(lines))

if __name__ == "__main__":
    root = tk.Tk()
    app = KeystrokeDemoApp(root)
    root.mainloop()
